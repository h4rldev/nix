#!/usr/bin/env bash

__NAME__="h4rl's nix configuration: update-nix"
__AUTHOR__="h4rl"
__DESCRIPTION__="Updates the flake lock and applies the configuration to the system."
__LICENSE__="BSD 3-Clause License"
__VERSION__="0.1.0"

COLOR=true

if ${COLOR}; then
        ESCAPE=$(printf "\e")
        RED="${ESCAPE}[0;31m"
        GREEN="${ESCAPE}[0;32m"
        YELLOW="${ESCAPE}[1;33m"
        BLUE="${ESCAPE}[0;34m"
        CYAN="${ESCAPE}[0;36m"
        CLEAR="${ESCAPE}[0m"
fi

for arg in "$@"; do
        case ${arg} in
        "-mem" | "--memory" | "slow")
                MAX_JOBS="--max-jobs 2 --cores 6"
                echo -e "${YELLOW}!${CLEAR} Slow mode enabled"
                ;;
        "-omegamem" | "--omega-memory" | "slower")
                MAX_JOBS="--max-jobs 1 --cores 4"
                echo -e "${YELLOW}!${CLEAR} Slower mode enabled"
                ;;
        *)
                MAX_JOBS=""
                ;;
        esac
done

case ${2} in
"boot")
        SUB_CMD="boot"
        ;;

"test")
        SUB_CMD="test"
        ;;

"build")
        SUB_CMD="build"
        ;;

"repl")
        SUB_CMD="repl"
        ;;

"switch" | *)
        SUB_CMD="switch"
        ;;
esac

if nh --help >/dev/null 2>&1; then
        echo -e "${BLUE}>${CLEAR} Using nh for updating and cleaning, as it is available"
        UPDATE_COMMAND="nh os ${SUB_CMD} . -- ${MAX_JOBS}"
        CLEAN_COMMAND="nh clean all"
        NH_AVAILABLE=true
else
        echo -e "${BLUE}>${CLEAR} Using nixos-rebuild for updating and nix-collect-garbage for cleaning, as nh is not available"
        UPDATE_COMMAND="sudo nixos-rebuild ${SUB_CMD} --flake .# ${MAX_JOBS}"
        CLEAN_COMMAND="sudo nix-collect-garbage"
        NH_AVAILABLE=false
fi

handle_failure() {
        local MESSAGE="${1}"

        if [[ -z ${MESSAGE} ]]; then
                echo "${RED}!${CLEAR} No failure message provided, are you using this right?"
                exit 1
        fi

        echo "${RED}!${CLEAR} ${MESSAGE}${CLEAR}"
        exit 1
}

pushd "${HOME}/.config/nix/" >/dev/null || handle_failure "Failed to pushd"

throw_out_garbage() {
        local old_derivations

        case ${1} in
        "-n" | "-no" | "--no-clean" | "no-clean")
                if [[ ${NH_AVAILABLE} == true ]]; then
                        old_derivations="--keep-since 14d"
                else
                        old_derivations=""
                fi
                ;;
        *)
                if [[ ${NH_AVAILABLE} == true ]]; then
                        old_derivations=""
                else
                        old_derivations="-d"
                fi
                ;;
        esac

        echo -e "${BLUE}>${CLEAR} Garbage collecting.."
        if $CLEAN_COMMAND ${old_derivations}; then
                echo -e "${GREEN}✓${CLEAR} Successfully garbage collected!"
        else
                echo -e "${RED}!${CLEAR} Somecthing went wrong garbage collecting! \nError code: ${?}"
                exit 1
        fi
}

update_lock() {
        echo -e "${BLUE}>${CLEAR} Updating flake.lock.."
        if nix flake update; then
                echo -e "${GREEN}✓${CLEAR} Successfully updated flake.lock!"
        else
                echo -e "${RED}!${CLEAR} Somecthing went wrong updating flake.lock! \nError code: ${?}"
                exit 1
        fi
}

rebuild() {
        echo -e "${BLUE}>${CLEAR} Rebuilding the NixOS configuration.."
        if $UPDATE_COMMAND; then
                echo -e "${GREEN}✓${CLEAR} Successfully reconfigured!"
        else
                echo -e "${RED}!${CLEAR} Somecthing went wrong reconfiguring! \nError code: ${?}"
                exit 1
        fi
}

update_entire_system() {
        update_lock
        rebuild
}

case ${1} in
"gc" | "cg" | "garbage-collect" | "collect" | "collect-garbage" | "clean" | "garbage")
        throw_out_garbage "${2}"
        ;;
"lock")
        update_lock
        ;;

"rebuild")
        rebuild
        ;;

"all" | *)
        update_entire_system
        ;;
esac

echo -e "${GREEN}✓${CLEAR} Finished!"

popd >/dev/null || handle_failure "Failed to popd"
